library(shiny)
library(shinydashboard)
library(tigris)
library(sf)
library(leaflet)
library(readxl)
library(zipcodeR)
library(tidyverse)
library(shinycssloaders)
library(ggplot2)

# -----------------------

# Need to do: change pop up HRSA clinics. (DONE) - added websites but some NA
# Make sure they appear / disappear only when box is checked. (DONE) - fix: if state selected first, all markers show (not just state)
# Make sure they appear only for state selected if state selected (DONE i think)
# Change dimensions of map, tables, etc. 
# Add tract data chirag sent (can't read)
# Maybe add another panel with histograms (ex. x-axis states or counties, to see distribution for each variable, for top 5%, 10%, 1% of tracts?)
# Change markers? Maybe circle markers 
# Detail to fix: acces2 is automatically set if no variable selected. Try to fix so that choropleth polygons don't show (DONE)
# if no variable is selected, only the state / map (DONE)
# in crude prevalences data table, change title so that it updates with chosen variable and location

# Add numbers to crude prevalence table (1, 2, 3 ) so position can be known (DONE)

# How many clinics per state / county, etc...
# Clinic vs no clinic 
# Be able to compare the value of a tract with state average, county average or even national average?

# Be able to search for a tract

# -----------------------

# State names
state_names = sort(unique(census_tract_data$statedesc))

# -----------------------

census_tract_data <- read_csv("/Users/piadavis/500 Cities/PLACES__Census_Tract_Data__GIS_Friendly_Format___2022_release.csv", show_col_types = FALSE)
# census_tract_data <- read_csv("/Users/piadavis/Downloads/PLACES__Census_Tract_Data__GIS_Friendly_Format___2023_release.csv", show_col_types = FALSE)
# census_tract_data <- read_csv("PLACES__Census_Tract_Data__GIS_Friendly_Format___2022_release.csv", show_col_types = FALSE)
names(census_tract_data) <- tolower(names(census_tract_data))

# add latitude and longitude columns from geolocation
census_tract_data$longitude <- as.numeric(sub(".*\\((-?\\d+\\.\\d+)\\s-?\\d+\\.\\d+\\).*", "\\1", census_tract_data$geolocation))
census_tract_data$latitude <- as.numeric(sub(".*\\(-?\\d+\\.\\d+\\s(-?\\d+\\.\\d+)\\).*", "\\1", census_tract_data$geolocation))

# -----------------------

# Mobile Health Map Data
mhm_data=read_excel('/Users/piadavis/500 Cities/MHM-Data.xlsx')
# mhm_data=read_excel('MHM-Data.xlsx')
# US only
mhm_filtered <- subset(mhm_data, country == "United States")
# Clinics with location only
mhm_data_filtered <- mhm_filtered[complete.cases(mhm_filtered$latitude, mhm_filtered$longitude), ]

# Change value for Whittier Street Health Center Mobile Health Van, zip code was incorrect
row_to_change <- which(mhm_data_filtered$clinic_name == "Whittier Street Health Center Mobile Health Van")
mhm_data_filtered$zip_postal_code[row_to_change] <- "02120"

# Observations that have NA values for state, but have postal code
na_indices <- which(is.na(mhm_data_filtered$geo_state) & nchar(mhm_data_filtered$zip_postal_code) == 5)

# Add state to state column based on clinics' zip code
zip_to_state <- function(postal_code) {
  return(reverse_zipcode(postal_code)$state)
}

for (index in na_indices) {
  mhm_data_filtered$geo_state[index] <- zip_to_state(mhm_data_filtered$zip_postal_code[index])
}



# -----------------------
# Variables for census tract data 

crudeprevs_descriptions <- c("Current lack of health insurance among adults aged 18-64 years", "Arthritis among adults aged >=18 years", "Crude prevalence of binge drinking among adults aged >=18 years", 
                             "High blood pressure among adults aged >=18 years", "Taking medicine for high blood pressure control among adults aged >=18 years with high blood pressure", "Cancer (excluding skin cancer) among adults aged >=18 years", 
                             "Current asthma among adults aged >=18 years", "cervical cancer screening among adult women aged 21–65 years", "Coronary heart disease among adults aged >=18 years", "Visits to doctor for routine checkup within the past year among adults aged >=18 years",
                             "cholesterol screening among adults aged >=18 years", "Fecal occult blood test, sigmoidoscopy, or colonoscopy among adults aged 50–75 years", "Chronic obstructive pulmonary disease among adults aged >=18 years", 
                             "Older adult men aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening", 
                             "Older adult women aged >=65 years who are up to date on a core set of clinical preventive services: Flu shot past year, PPV shot ever, Colorectal cancer screening, and Mammogram past 2 years", 
                             "Current smoking among adults aged >=18 years", "Visits to dentist or dental clinic among adults aged >=18 years", "Depression among adults aged >=18 years", "Diagnosed diabetes among adults aged >=18 years", 
                             "Fair or poor health among adults aged >=18 years", "High cholesterol among adults aged >=18 years who have been screened in the past 5 years", "Chronic kidney disease among adults aged >=18 years", "No leisure-time physical activity among adults aged >=18 years", 
                             "Mammography use among women aged 50–74 years", "Mental health not good for >=14 days among adults aged >=18 years", "Obesity among adults aged >=18 years", "Physical health not good for >=14 days among adults aged >=18 years", "Sleeping less than 7 hours among adults aged >=18 years", 
                             "Stroke among adults aged >=18 years", "All teeth lost among adults aged >=65 years")
new_colnames <- colnames(census_tract_data)[grep("_crudeprev$", colnames(census_tract_data))]
variable_descriptions <- data.frame("Variable" = new_colnames, "Description" = crudeprevs_descriptions)
variable_short <- c("Lack of health insurance", "Arthritis", "Binge Drinking", "High Blood Pressure", "Medicine for High BP", "Cancer", "Asthma", "Cervical Cancer Screening", "Coronary Heart Disease","Routine Checkup","Cholesterol Screening", "Fecal occult blood test, sigmoidoscopy, or colonoscopy","Chronic obstructive pulmonary disease", "Men Up to Date Core","Women Up to Date Core","Current Smoking", "Dental Visits", "Depression", "Diabetes", "Fair / Poor Health", "High Colesterol", "Chronic Kidney Disease", "No leisure time physical activity","Mammography","Poor Mental Health", "Obesity", "Poor Physical Health", "Poor Sleeping", "Stroke", "Teeth Lost")

variable_descriptions <- transform(variable_descriptions, "Short" = variable_short)

variable_names = sort(variable_descriptions$Short)


# For table displayed on Dashboard, so user can see details of each variable
variable_descriptions_2 <- variable_descriptions[, !colnames(variable_descriptions) %in% "Variable"]
new_order <- c("Short", "Description")
variable_descriptions_2 <- variable_descriptions_2[, new_order]

# -----------------------
# Mobile Health Clinic Categories
clinic_categories = sort(c("Dental", "Mammography", "Other Specialties", "Primary Care", "Behavioral Health", "Sexual and Reproductive Health", "Vision", "Asthma", "Pediatrics", "Preventive", "Maternal and Infant Health"))

# -----------------------

# HRSA Data
hrsa_data <- read_csv("/Users/piadavis/500 Cities/Health_Center_Service_Delivery_and_LookAlike_Sites.csv")

# only mobile vans in HRSA 
HRSA_Mobile_Vans <- hrsa_data %>%
  filter(`Health Center Location Type Description` == "Mobile Van")

# HRSA  latitude and longitude columns from geolocation
HRSA_Mobile_Vans$longitude <- HRSA_Mobile_Vans$`Geocoding Artifact Address Primary X Coordinate`
HRSA_Mobile_Vans$latitude <- HRSA_Mobile_Vans$`Geocoding Artifact Address Primary Y Coordinate`

# This gets all tracts with geo info (from all states)
# could probably replace this with existing variable
state_codes <- c("al", "ak", "az", "ar", "ca", "co", "ct", "de", "fl", "ga", "hi", "id", "il", "in", "ia",
                  "ks", "ky", "la", "me", "md", "ma", "mi", "mn", "ms", "mo", "mt", "ne", "nv", "nh", "nj",
                  "nm", "ny", "nc", "nd", "oh", "ok", "or", "pa", "ri", "sc", "sd", "tn", "tx", "ut", "vt",
                  "va", "wa", "wv", "wi", "wy", "dc")
get_state_tracts <- function(state_code) {
  tracts(cb = TRUE, year = 2015, state = state_code)
}
all_state_tracts <- do.call(rbind, lapply(state_codes, get_state_tracts))
all_state_tracts_sf <- st_as_sf(all_state_tracts)

#MHM
all_mhm_clinics_sf <- st_as_sf(mhm_data_filtered, coords = c("longitude", "latitude"), crs = st_crs(all_state_tracts_sf))
all_mhm_clinics_with_tracts <- st_join(all_mhm_clinics_sf, all_state_tracts_sf)

#HRSA
all_hrsa_clinics_sf <- st_as_sf(HRSA_Mobile_Vans, coords = c("longitude", "latitude"), crs = st_crs(all_state_tracts_sf))
all_hrsa_clinics_with_tracts <- st_join(all_hrsa_clinics_sf, all_state_tracts_sf)

# Tracts that have clinics in US
all_tracts_with_mhm_clinics <- unique(all_mhm_clinics_with_tracts$GEOID)
all_tracts_with_hrsa_clinics <- unique(all_hrsa_clinics_with_tracts$GEOID)

all_tracts_with_clinic <- c(all_tracts_with_mhm_clinics, all_tracts_with_hrsa_clinics)

# Added column to all_tracts where value 1 indicates that the tract has a clinic, 
# and value 0 indicates that the tract does not have a clinic 
census_tract_data$has_clinic <- ifelse(census_tract_data$tractfips %in% all_tracts_with_clinic, "Yes", "No")

# -----------------------

# New data
# census_data <- readRDS("/Users/piadavis/Downloads/family_van_acs.rds")
acs_census_data <- readRDS("/Users/piadavis/500 Cities/family_van_acs_2015.rds")
# Cols converted from decimal to %
acs_census_data <- acs_census_data %>% 
  mutate(across(c("d_below_poverty_line_percentage", "d_no_health_insurance_percentage", "d_white_percentage", "d_black_percentage", "d_asian_percentage",
                  "d_hawaii_pi_percentage", "d_other_race_percentage","d_two_more_race_percentage"), ~ round(. * 100, 1)))
format_median_income <- function(x) {
  if (is.na(x)) {
    return("NA")
  } else {
    return(format(x, big.mark = ","))
  }
}
acs_census_data$d_median_income <- format(acs_census_data$d_median_income, big.mark = ",")
census_tract_data <- left_join(census_tract_data, acs_census_data, by = c("tractfips" = "GEOID"))

# -----------------------

ui <- dashboardPage(
  dashboardHeader(title = "Mobile Health Clinic Data"),
  dashboardSidebar(
    sidebarMenu(id = "sidebar",
                menuItem("Map", tabName = "map", icon = icon("map")),
                menuItem("Numbers", tabName = "nums", icon = icon("chart-simple")),
                conditionalPanel("input.sidebar == 'map' | input.sidebar == 'nums' ",
                                 selectInput("state_select", "Select State: ",choices = c("Select a State", state_names), selected = "Select a State"),
                                 selectInput("variable_select", "Select Variable: ",choices = c("Select a Variable", variable_names), selected = "Select a Variable")
                ),
                conditionalPanel("input.sidebar == 'map'",
                                 checkboxInput("show_mhm", "Show MHV Clinics", value = FALSE),
                                 conditionalPanel(
                                   condition = "input.show_mhm > 0",
                                   checkboxGroupInput("mhclinic_select", "Select Clinic Category: ", choices = c("All Categories", clinic_categories), selected = "")
                                 ),
                                 checkboxInput("show_vans", "Show HRSA Mobile Vans", value = FALSE)            
                )
    )
  ),
  dashboardBody(
    tabItems(
      # First Tab Item - Map
      tabItem( tabName = "map",
               fluidRow(
                 box(withSpinner(leafletOutput("state_map")), width = 12)),
               br(),
               br(),
               fluidRow(
                 conditionalPanel(
                   condition = "input.variable_select != 'Select a Variable'", 
                   # box(title = "Crude Prevalence by Tract", solidHeader = TRUE, dataTableOutput("crudeprev_desc"), width = 12, status = "primary"),
                   withSpinner(uiOutput("placeholder"))
                 ),
                 box(title = "Variable Descriptions", dataTableOutput("v_descriptions"), width = 12, status = "primary", solidHeader = TRUE, collapsible = TRUE)  
               )
      ),
      tabItem(tabName = "nums",
              box(
                title = "Distribution", solidHeader = T, 
                sliderInput("slider1", "Slider input:", 0, 50, value = 1, step = 5),
                width = 12,
                plotOutput("hist")
              )
              )
    )
  )
)

server <- function(input, output) {
  # Load the U.S. tract shapefile, starts at MA because whole country cannot be mapped? I think
  us_tracts <- states()
  
  # Reactive value to check if "Select a State" is chosen
  selected_state <- reactive({
    input$state_select
  })
  
  # Observe changes in the state selection and update the map accordingly
  observe({
    

    # For state map with tracts, no PLACES data yet
    state_selected <- input$state_select
    # below is for use in MHM data, full name of state
    state_selected_full <- input$state_select
    
    
    # Filter the data for the selected state
    if (state_selected == "Select a State") {
      state_map_data <- us_tracts
    } else {
      if (state_selected == "District of Columbia") {
        state_selected <- "DC"
      } else {
        state_selected <- state.abb[match(state_selected, state.name)]
      }
      # new if statement
      if (state_selected == "AK" | state_selected == "HI") {
        # Have to use 2019 census tracts because 2015 data doesn't work for Alaska or Hawaii
        state_map_data <- tracts(state=state_selected, cb=T, year = 2019)
      } else {
        # All states other than HI and AK use 2015 data
        state_map_data <- tracts(state=state_selected, cb=T, year = 2015)
      }
    }
    
    
    
    # For PLACES data layer
    if (state_selected != "Select a State") {
      state_census_tract_data <- census_tract_data[census_tract_data$stateabbr == state_selected, ]
    } else {
      state_census_tract_data <- census_tract_data
    }
    
    variable_selected <- input$variable_select
    

    if (variable_selected == "Select a Variable") {
      subset_state_variable <- state_census_tract_data[,c("tractfips", "countyname", "stateabbr", "access2_crudeprev")]
    } else {
      variable_selected <- variable_descriptions$Variable[variable_descriptions$Short == variable_selected]
      subset_state_variable <- state_census_tract_data[,c("tractfips", "countyname", "stateabbr", variable_selected, "has_clinic", "d_median_income",
                                                          "d_below_poverty_line_percentage", "d_white_percentage", "d_black_percentage", "d_asian_percentage",
                                                          "d_hawaii_pi_percentage", "d_other_race_percentage", "d_two_more_race_percentage")]
    }
    
    colnames(subset_state_variable) <- c("Tract", "County", "State", "Crude Prevalence (%)", "Has Clinic", "Median Income", "Below Poverty Line", "% White", "% Black",
                                         "% Asian", "% Hawaii / PI", "% Other Race", "% Mixed Race")
    crudeprev_dt <- subset_state_variable

    subset_state_variable <-subset_state_variable[,c("Tract", "Crude Prevalence (%)")] 
    colnames(subset_state_variable) <- c("GEOID", "value")

    
    state_variable_merged <- geo_join(state_map_data, subset_state_variable, "GEOID", "GEOID")
    
    # Palette 
    pal <- colorNumeric("Reds", domain = NULL, na.color = "gray")         #can change domain if needed
    
    #Pop up
    # For when variable is selected
    popup_value_tract <- reactive ({
      paste0("Crude Prevalence: ", as.character(state_variable_merged$value),
             "\nTract: ", as.character(state_variable_merged$GEOID))
    })
    
    # For when variable is not selected
    popup_value_tract2 <- reactive ({
      paste0("Tract: ", as.character(state_variable_merged$GEOID))
    })
    
    #state_selected
    # For mapping clinics by state 
    if (state_selected != "Select a State") {
      # MHM
      mhm_data_filtered <- subset(mhm_data_filtered, toupper(geo_state) %in% c(toupper(state_selected), state_selected_full))
      #HRSA
      HRSA_Mobile_Vans <- subset(HRSA_Mobile_Vans, `Site State Abbreviation` == state_selected) 
    }
    
    
    # MH Clinic Category 
    category_selected <- input$mhclinic_select
    
    # Display clinics from category selected, and all clinics if no category is selected
    if ("All Categories" %in% category_selected) {
      mhm_data_display <- mhm_data_filtered
    } else {
      selected_categories_pattern <- paste(category_selected, collapse = "|")
      mhm_data_display <- subset(mhm_data_filtered, grepl(selected_categories_pattern, general_service_category))    }
    
    
    # Render the state map with tracts (works)
    output$state_map <- renderLeaflet({
      
      if (selected_state() == "Select a State") {
        state_map_data %>%
          leaflet() %>%
          addTiles() %>%
          addPolygons(weight = .5,
                      fillOpacity = 0.3,
                      popup = ~NAME) 
        
      } else {
        # if variable not selected (don't show colors)
        if (variable_selected == "Select a Variable") {
          state_map_data %>%
            leaflet() %>%
            addProviderTiles("CartoDB.Positron") %>%
            setView(state_census_tract_data$longitude[1], state_census_tract_data$latitude[1], 
                    if (state_selected== "DC") {
                      zoom = 10
                    } else if (state_selected== "AK") {
                      zoom = 3
                    } else if (state_selected %in% c("RI", "NJ", "CT", "NH", "HI", "VT", "DE")) {
                      zoom = 6
                    } else {
                      zoom = 5
                    } 
            ) %>% 
            addPolygons(data=state_variable_merged,
                        weight = .3,
                        fillOpacity = 0.3,
                        popup =~popup_value_tract2()
            ) 
            
        } else {
          # if variable selected (show colors)
          state_map_data %>%
            leaflet() %>%
            addProviderTiles("CartoDB.Positron") %>%
            setView(state_census_tract_data$longitude[1], state_census_tract_data$latitude[1], 
                    if (state_selected== "DC") {
                      zoom = 10
                    } else if (state_selected== "AK") {
                      zoom = 3
                    } else if (state_selected %in% c("RI", "NJ", "CT", "NH", "HI", "VT", "DE")) {
                      zoom = 6
                    } else {
                      zoom = 5
                    } 
            ) %>% 
            addPolygons(data=state_variable_merged,
                        fillColor = ~pal(state_variable_merged$value),
                        fillOpacity = .7,
                        weight = .3,
                        smoothFactor = .2,
                        popup =~popup_value_tract()
            ) %>%
            addLegend(pal=pal,
                      values=state_variable_merged$value,
                      position = "bottomright",
                      title="Crude Prevalence"
            ) 
            
            
        }
        
      }
      
    })
    
    
    
    # Show MHM Clinics
    observeEvent(input$show_mhm, { 
      # Add markers for the MHM Clinics if checkBox selected or some category selected
      if (input$show_mhm == FALSE | length(input$mhclinic_select) == 0) {
        all_clinic_names <- mhm_data_filtered$clinic_name
        lapply(all_clinic_names, function(clinic_name) {
          leafletProxy("state_map") %>%
            removeMarker(layerId = clinic_name)
        }) 
      } else {
        leafletProxy("state_map") %>% 
          addMarkers(data = mhm_data_display, 
          # addCircleMarkers(data = mhm_data_display,
                     lng=mhm_data_display$longitude, lat=mhm_data_display$latitude, 
                     layerId = mhm_data_display$clinic_name,
                     # color = "navy",
                     popup= ~paste("<b>", mhm_data_display$clinic_name, "</b>", "<br>",
                                   "Services: ", mhm_data_display$general_service_category))
      }
    })

    
    # Show HRSA Clinics
    observeEvent(input$show_vans, {
      # Add markers for the MHM Clinics if checkBox selected or some category selected
      if (input$show_vans == FALSE) {
        all_hrsa_clinics <- HRSA_Mobile_Vans$`Site Name`
        lapply(all_hrsa_clinics, function(`Site Name`) {
          leafletProxy("state_map") %>%
            removeMarker(layerId = `Site Name`)
        }) 
      } else {
        leafletProxy("state_map") %>%
          addMarkers(data = HRSA_Mobile_Vans, 
          # addCircleMarkers(data = HRSA_Mobile_Vans,
                     lng=HRSA_Mobile_Vans$longitude, 
                     lat=HRSA_Mobile_Vans$latitude,
                     # lat=HRSA_Mobile_Vans$`Geocoding Artifact Address Primary Y Coordinate`, 
                     layerId = HRSA_Mobile_Vans$`Site Name`,
                    # tried to hyperlink website and wasn't able to
                     popup= ~paste("<b>", str_to_title(HRSA_Mobile_Vans$`Health Center Name`), "</b>", "<br>",
                                          "Website: ", HRSA_Mobile_Vans$`Site Web Address`) #,
                     # icon = ~leaflet::makeIcon(iconUrl = "http://maps.google.com/mapfiles/ms/icons/green-dot.png")
          )
                     
      }
      
    })
    
    
    
    
    # Table
    # Box crude prevs 
    output$placeholder = renderUI({
      req(input$variable_select)
        box(title = paste0(input$variable_select, " Crude Prevalence by Tract"), solidHeader = TRUE, dataTableOutput("crudeprev_desc"), width = 12, status = "primary")
    })
    
    crudeprev_descending <- crudeprev_dt
    crudeprev_descending <- crudeprev_descending[order(-crudeprev_descending$`Crude Prevalence (%)`), ]
    # Add column with # (position)
    crudeprev_descending <- rownames_to_column(crudeprev_descending, "#")
    
    # add table with tracts by descending order of crude prev only when a variable is selected
    if (input$variable_select != "Select a Variable") {
      output$crudeprev_desc <- renderDataTable(
        crudeprev_descending
      )
    }
    
    
    # Add variable description box
    output$v_descriptions <- renderDataTable(
      variable_descriptions_2
    )
    
    
    
      # First 100 obseravtions (descending order)
      percent <- as.integer(input$slider1) / 100
      percent2 <- ceiling(percent * length(crudeprev_dt))
      first_n_percent <- crudeprev_dt[1:percent2, ]
    
      output$hist <- renderPlot(
        ggplot(first_n_percent) +
          geom_bar(mapping = aes(x = State))
      )
      
      # output$hist <- renderPlot(
        # if (input$state_select == "Selected State") {
          # ggplot(first_n_percent) + 
            # geom_bar(mapping = aes(x = first_n_percent$`State`))
        # } else {
          # Histogram by county
          # ggplot(first_n_percent) + 
            # geom_bar(mapping = aes(x = first_n_percent$`County`))
          
        # }
      # )
      
    
    
  })
  
  
}

shinyApp(ui, server)
